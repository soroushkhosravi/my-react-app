# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  terraform2: orbies/terraform@8.1.0
  terraform: circleci/terraform@3.1

jobs:
  test:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-python:3.8ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: create docker container
          command: |
            docker build -t soroush --build-arg ENVIRONMENT=test .
#      - run:
#          name: Running the container
#          command: |
#            docker run -d --name soroush soroush tail -f /dev/null
      - run:
          name: Run the unit tests
          command: |
            docker run soroush npm test
#      - run:
#          name: stop the container
#          command: |
#            docker stop $(docker ps -aq)

workflows:
  application-deployment:
    jobs:
      # The requirements of this job are setting the following ENV variables for the circleci application:
      # AWS_ACCESS_KEY_ID, AWS_ACCOUNT_ID, AWS_ECR_REGISTRY_ID, AWS_REGION, AWS_SECRET_ACCESS_KEY
      - test
      - aws-ecr/build-and-push-image:
          name: BuildAppImage
          tag: $CIRCLE_SHA1
          filters:
            branches:
              only:
                - main
          dockerfile: Dockerfile
          repo: my-react-app
          extra-build-args: "--build-arg ENVIRONMENT=production"
          requires:
            - test

      - terraform/fmt:
          checkout: true
          context: terraform
          requires:
            - BuildAppImage
      - terraform/validate:
          checkout: true
          context: terraform
          requires:
            - terraform/fmt
      - terraform/plan:
          checkout: true
          context: terraform
          persist-workspace: true
          requires:
            - terraform/validate
      - terraform/apply:
          attach-workspace: true
          context: terraform
          filters:
            branches:
              only: main
          requires:
            - terraform/plan